package main

import (
	"fmt"
	"sort"
	"strings"
)

/*
	Напишите функцию, которая находит все множества анаграмм по заданному словарю.

	Требования
	На вход подается срез строк (слов на русском языке в Unicode).

	На выходе: map-множество -> список, где ключом является первое встреченное слово множества,
	а значением — срез из всех слов, принадлежащих этому множеству анаграмм, отсортированных по возрастанию.

	Множества из одного слова не должны выводиться (т.е. если нет анаграмм, слово игнорируется).

	Все слова нужно привести к нижнему регистру.

	Пример:

	Вход: ["пятак", "пятка", "тяпка", "листок", "слиток", "столик", "стол"]
	Результат (ключи в примере могут быть в другом порядке):
	– "пятак": ["пятак", "пятка", "тяпка"]
	– "листок": ["листок", "слиток", "столик"]

	Слово «стол» отсутствует в результатах, так как не имеет анаграмм.

	Для решения задачи потребуется умение работать со строками, сортировать
	и использовать структуры данных (map).

	Оценим эффективность: решение должно работать за линейно-логарифмическое время
	относительно количества слов (допустимо n * m log m, где m — средняя длина слова для сортировки букв).
*/

func main() {
	fmt.Println(searchMultiplyAnagrams([]string{"пятак", "пятка", "тяпка", "листок", "слиток", "столик", "стол"}))
}

func searchMultiplyAnagrams(str []string) map[string][]string {
	m := make(map[string][]string)
	firstWord := make(map[string]string)
	res := make(map[string][]string)

	for i := 0; i < len(str); i++ {
		ls := strings.ToLower(str[i])
		key := getAnagramKey(ls)

		if _, ok := firstWord[key]; !ok {
			firstWord[key] = ls
		}
		m[key] = append(m[key], ls)
	}

	for k, v := range m {
		if len(v) < 2 {
			continue
		}
		sort.Strings(v)
		res[firstWord[k]] = v
	}

	return res
}

func getAnagramKey(s string) string {
	sr := []rune(s)
	sort.Slice(sr, func(i, j int) bool {
		return sr[i] < sr[j]
	})
	return string(sr)
}
