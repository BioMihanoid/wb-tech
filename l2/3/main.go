package main

import (
	"fmt"
	"os"
)

/*
	Что выведет программа?
	Объяснить внутреннее устройство интерфейсов и их отличие от пустых интерфейсов.

	Программа выведет <nil> и false. Вывод такой будет потому что у интерфейса будет тип,
	а значение будет у него nil. Интерфейс в го представляет из себя структуру:

	type iface struct {
		tab *itab
		data unsafe.Pointer
	}, где tab - указатель на структуру itab, которое хранит метаданные о типе и списке методов,
	используемых для удовлетворения интерфейса. data указывает на фактическую переменную с конкретным типом.

	itab - структура в го:
	type itab struct {
		inter *interfacetype
		_type *_type
		hash uint32
		_ [4]byte
		func [1]uniptr
	}, где inter *interfacetype - метаданные интерфеса,
	_type *_type - указатель на информацию о конкретном типе, который реализует интерфейс,
	hash uint32 - хеш типа, который нужен для оптимизации взаимодействия с интерфейсом, такие как type switch
	_ [4]byte - заполнитель, чтобы выровнять структуру и следующее поле в памяти начиналось с 8-го байта,
	func [1]uniptr - массив указателей на функции, которые должны быть реализованы для удовлетворения интерфейсу.

	Пустой интерфейс - это интерфейс, которому удовлетворяет любой тип. Поскольку у этого интерфейса нет методов,
	то у него нет itable и ему не надо отдельно перед компиляцией просчитывать и хранить её, достаточно только
	информации о типе.
*/

func Foo() error {
	var err *os.PathError = nil
	return err
}

func main() {
	err := Foo()
	fmt.Println(err)
	fmt.Println(err == nil)
}
